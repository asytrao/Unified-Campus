rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ---------------- USERS ----------------
    match /users/{userId} {
      // User can read and write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;

      // Professors can read student docs (to access department/year info)
      allow read: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professor';

      // Subcollection: notifications (e.g., screenshot notifications)
      match /notifications/{notificationId} {
        // Only the owner can read their notifications
        allow read: if request.auth != null && request.auth.uid == userId;

        // Who can create a notification for a user?
        // - The user themselves
        // - Any authenticated professor (to notify students)
        allow create: if request.auth != null && (
          request.auth.uid == userId ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professor'
        );

        // Only the owner can update/delete their notifications
        allow update, delete: if request.auth != null && request.auth.uid == userId;

        // Optional: basic validation for notification payloads
        function isValidNotification() {
          return request.resource.data.keys().hasAll(['title','message','createdAt']) &&
                 (request.resource.data.imageUrl is string || request.resource.data.imageUrl == null) &&
                 request.resource.data.createdAt == request.time;
        }
      }

      // Subcollection: screenshots (metadata documents referencing Storage URLs)
      match /screenshots/{screenshotId} {
        // Only the owner can read their screenshots metadata
        allow read: if request.auth != null && request.auth.uid == userId;

        // The owner or a professor can create screenshot metadata docs
        allow create: if request.auth != null && (
          request.auth.uid == userId ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professor'
        );

        // Only the owner can update/delete
        allow update, delete: if request.auth != null && request.auth.uid == userId;
      }
    }

    // ---------------- DEPARTMENTS ----------------
    match /departments/{deptId} {
      // Professors can read/update their own department
      allow read: if request.auth != null;
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professor' &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.department == deptId;
    }

    // ---------------- SUBJECTS ----------------
    match /subjects/{docId} {
      allow read: if request.auth != null;

      // Only professors can create/update/delete subjects
      allow write: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professor';

      match /subjectList/{subjectId} {
        allow read: if request.auth != null;
        allow write: if request.auth != null &&
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professor';

        match /content/{contentId} {
          allow read: if request.auth != null;
          allow write: if request.auth != null &&
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professor';

          match /submissions/{submissionId} {
            // Student can read/write their own submissions
            allow read, write: if request.auth != null && submissionId == request.auth.uid;

            // Professors can read all submissions
            allow read: if request.auth != null &&
              get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professor';
          }
        }
      }
    }

    // ---------------- QUERIES ----------------
    match /queries/{docId} {
      allow read, write: if request.auth != null;

      match /subjectList/{subjectId} {
        allow read, write: if request.auth != null;

        match /queries/{queryId} {
          allow read: if request.auth != null;

          // Students can create queries
          allow create: if request.auth != null &&
            get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';

          // Students can update/delete their own queries; professors can update/delete all
          allow update, delete: if request.auth != null &&
            (resource.data.studentId == request.auth.uid ||
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professor');
        }
      }
    }

    // ---------------- COMMUNITIES ----------------
    match /communities/{communityId} {
      allow read: if request.auth != null;
      allow create, update, delete: if request.auth != null;

      match /messages/{messageId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
        allow update, delete: if request.auth != null && resource.data.senderId == request.auth.uid;
      }
    }

    // ---------------- DOCUMENTS ----------------
    match /documents/{documentId} {
      // Anyone can read documents
      allow read: if request.auth != null;
      
      // Students can create documents
      allow create: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student' &&
        request.resource.data.uploadedBy == request.auth.uid;
      
      // Students can update their own documents (before approval)
      // Professors can update any document (for approval/rejection)
      allow update: if request.auth != null && (
        (resource.data.uploadedBy == request.auth.uid && resource.data.status == 'pending') ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'professor'
      );
      
      // Only document owner can delete their own documents
      allow delete: if request.auth != null && resource.data.uploadedBy == request.auth.uid;
    }

    // ---------------- NOTIFICATIONS ----------------
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // System can create notifications for users
      allow create: if request.auth != null;
      
      // Users can update their own notifications (mark as read)
      allow update: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // Users can delete their own notifications
      allow delete: if request.auth != null && resource.data.userId == request.auth.uid;
    }

    // ---------------- DEFAULT DENY ----------------
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
